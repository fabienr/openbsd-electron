Avoid HW_MODEL and HW_CPUSPEED syscall to run under pledge().
Replace HW_MODEL by HW_MACHINE, set cpuspeed to 0.

Up to 2024/08, the only consumers are os.cpus().length.

Index: third_party/electron_node/deps/uv/src/unix/openbsd.c
--- third_party/electron_node/deps/uv/src/unix/openbsd.c.orig
+++ third_party/electron_node/deps/uv/src/unix/openbsd.c
@@ -183,11 +183,11 @@ int uv_uptime(double* uptime) {
 
 int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count) {
   unsigned int ticks = (unsigned int)sysconf(_SC_CLK_TCK),
-               multiplier = ((uint64_t)1000L / ticks), cpuspeed;
+               multiplier = ((uint64_t)1000L / ticks), cpuspeed=0;
   uint64_t info[CPUSTATES];
   char model[512];
   int numcpus = 1;
-  int which[] = {CTL_HW,HW_MODEL};
+  int which[] = {CTL_HW,HW_MACHINE};
   int percpu[] = {CTL_KERN,KERN_CPTIME2,0};
   size_t size;
   int i, j;
@@ -208,11 +208,6 @@ int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count)
 
   i = 0;
   *count = numcpus;
-
-  which[1] = HW_CPUSPEED;
-  size = sizeof(cpuspeed);
-  if (sysctl(which, ARRAY_SIZE(which), &cpuspeed, &size, NULL, 0))
-    goto error;
 
   size = sizeof(info);
   for (i = 0; i < numcpus; i++) {
