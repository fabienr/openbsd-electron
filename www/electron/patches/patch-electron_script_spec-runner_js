Index: electron/script/spec-runner.js
--- electron/script/spec-runner.js.orig
+++ electron/script/spec-runner.js
@@ -32,10 +32,12 @@ for (const flag of unknownFlags) {
 }
 
 const utils = require('./lib/utils');
-const { YARN_VERSION } = require('./yarn');
+// already setup by MODYARN
+//const { YARN_VERSION } = require('./yarn');
 
 const BASE = path.resolve(__dirname, '../..');
-const NPX_CMD = process.platform === 'win32' ? 'npx.cmd' : 'npx';
+// already setup by MODYARN
+//const NPX_CMD = process.platform === 'win32' ? 'npx.cmd' : 'npx';
 
 const runners = new Map([
   ['main', { description: 'Main process specs', run: runMainProcessElectronTests }]
@@ -87,14 +89,19 @@ async function main () {
     console.log(`Running against Electron ${chalk.green(versionString)}`);
   }
 
+  /*
+  XXX const { hashElement } = require('folder-hash');
+  XXX folder-hash looks broken on openbsd
   const [lastSpecHash, lastSpecInstallHash] = loadLastSpecHash();
   const [currentSpecHash, currentSpecInstallHash] = await getSpecHash();
   const somethingChanged = (currentSpecHash !== lastSpecHash) ||
       (lastSpecInstallHash !== currentSpecInstallHash);
+  */
+  const somethingChanged = true
 
   if (somethingChanged) {
     await installSpecModules(path.resolve(__dirname, '..', 'spec'));
-    await getSpecHash().then(saveSpecHash);
+    //await getSpecHash().then(saveSpecHash);
   }
 
   if (!fs.existsSync(path.resolve(__dirname, '../electron.d.ts'))) {
@@ -165,10 +172,14 @@ async function runTestUsingElectron (specDir, testName
     exe = path.resolve(BASE, utils.getElectronExec());
   }
   const runnerArgs = [`electron/${specDir}`, ...unknownArgs.slice(2)];
-  if (process.platform === 'linux') {
+  if (['freebsd', 'linux', 'openbsd'].includes(process.platform)) {
+    /*// XXX use --no-sandbox ?
+    runnerArgs.unshift(path.resolve(__dirname, 'dbus_mock.py'),
+      exe, "--no-sandbox");*/
     runnerArgs.unshift(path.resolve(__dirname, 'dbus_mock.py'), exe);
     exe = 'python3';
   }
+  console.log(exe, runnerArgs)
   const { status, signal } = childProcess.spawnSync(exe, runnerArgs, {
     cwd: path.resolve(__dirname, '../..'),
     stdio: 'inherit'
@@ -218,7 +229,10 @@ async function installSpecModules (dir) {
   if (fs.existsSync(path.resolve(dir, 'node_modules'))) {
     await fs.promises.rm(path.resolve(dir, 'node_modules'), { force: true, recursive: true });
   }
-  const { status } = childProcess.spawnSync(NPX_CMD, [`yarn@${YARN_VERSION}`, 'install', '--frozen-lockfile'], {
+
+/* already setup by MODYARN */
+const { status } = childProcess.spawnSync('yarn', ['install', '--frozen-lockfile --offline --ignore-scripts --ignore-engines'], {
+// const { status } = childProcess.spawnSync(NPX_CMD, [`yarn@${YARN_VERSION}`, 'install', '--frozen-lockfile'], {
     env,
     cwd: dir,
     stdio: 'inherit',
@@ -228,6 +242,7 @@ async function installSpecModules (dir) {
     console.log(`${fail} Failed to yarn install in '${dir}'`);
     process.exit(1);
   }
+
 }
 
 function getSpecHash () {
