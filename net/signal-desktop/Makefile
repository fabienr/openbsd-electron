COMMENT=	Signal Desktop links with Signal

V=		7.34.0
DISTNAME=	Signal-Desktop-${V}
PKGNAME=	${DISTNAME:L}

# "node_modules/react-virtualized/dist/commonjs": permission denied
FIX_EXTRACT_PERMISSIONS=Yes

DIST_TUPLE=	github signalapp Signal-Desktop v${V} .

CATEGORIES=	net

HOMEPAGE=	https://signal.org/

MAINTAINER=	fabien@openbsd.org

# BSD 2-Clause
PERMIT_PACKAGE=	Yes

WANTLIB += ${MODCARGO_WANTLIB} c++ crypto m

# make versions
# ELECTRON_V=33.1.0
# NODE_V=20.18.0
# better-sqlite3 deps
# BETTER_SQLITE3_V=9.0.8
SQLCIPHER_H=	b0dbebe5b2d81879984bfa2318ba364fb4d436669ddc1668d2406eaaaee40b7e
SQLCIPHER_URI=	https://build-artifacts.signal.org/desktop/
SQLCIPHER_V=	v2-4.6.1-signal-patch2--0.2.0-${SQLCIPHER_H}
SQLCEXT_V=	0.2.0
FTS5_ID=	a2a00359b1c0987e9b167855ebf0cd93342fd26e
# libsignal depends
LIBSIGNAL_V=	0.60.2
BORING_ID=	3d4180b232d332a86ee3b41d1a622b0f1c1c6037
# ringrtc depends
RINGRTC_V=	2.48.7
WEBRTC_V=	6723a

# libsignal, boring depends to update by hand
#https://github.com/signalapp/boring/tree/${BORING_ID}/boring-sys/deps
BORINGSSL_ID=	44b3df6f03d85c901767250329c571db405122d5

# XXX ringrtc, cubeb-sys > libcubeb depends workaround by hand
#https://github.com/mozilla/cubeb-rs/issues/109
CUBEB_SYS_V=	0.17.0
#https://github.com/mozilla/cubeb-rs/tree/cubeb-v${CUBEB_SYS_V}/cubeb-sys
CUBEB_ID=	78b2bce70e0d1c21d3c175b72f322c50801b2e94

# better-sqlite3, MIT
SQLCIPHER_T=	${WRKSRC}/node_modules/@signalapp/better-sqlite3/deps
SITES.sqlc=	${SQLCIPHER_URI}
DISTFILES.sqlc=	sqlcipher-${SQLCIPHER_V}.tar.gz
EXTRACT_CASES+=	${DISTFILES.sqlc});;

# Signal-Sqlcipher-Extension, AGPLv3
SQLCEXT_SRC=	${WRKDIR}/Signal-Sqlcipher-Extension-${SQLCEXT_V}
SQLCEXT_TOML=	${SQLCEXT_SRC}/Cargo.toml
DIST_TUPLE+=	github signalapp Signal-Sqlcipher-Extension v${SQLCEXT_V} .

# Signal-FTS5-Extension, AGPLv3
FTS5_SRC=	${WRKDIR}/Signal-FTS5-Extension-${FTS5_ID}
FTS5_TOML=	${FTS5_SRC}/Cargo.toml
DIST_TUPLE+=	github signalapp Signal-FTS5-Extension ${FTS5_ID} .

# libsignal, AGPLv3
LIBSIGNAL_SRC=	${WRKDIR}/libsignal-${LIBSIGNAL_V}
LIBSIGNAL_NODE=	${LIBSIGNAL_SRC}/node
LIBSIGNAL_TOML=	${LIBSIGNAL_SRC}/Cargo.toml
LIBSIGNAL_T=	${WRKSRC}/node_modules/@signalapp/libsignal-client/prebuilds
DIST_TUPLE+=	github signalapp libsignal v${LIBSIGNAL_V} .

# boringssl, OpenSSL/ISC
BORINGSSL_T=	${WRKDIR}/boring-${BORING_ID}/boring-sys/deps
DIST_TUPLE+=	github google boringssl ${BORINGSSL_ID} .

# ringrtc, AGPLv3
RINGRTC_SRC=	${WRKDIR}/ringrtc-${RINGRTC_V}
RINGRTC_NODE=	${RINGRTC_SRC}/src/node
RINGRTC_TOML=	${RINGRTC_SRC}/Cargo.toml
RINGRTC_T=	${WRKSRC}/node_modules/@signalapp/ringrtc/build
DIST_TUPLE+=	github signalapp ringrtc v${RINGRTC_V} .

# webrtc, BSD-3-Clause
WEBRTC_SRC=	${RINGRTC_SRC}/src/webrtc/src
WEBRTC_T=	${WRKDIR}/ringrtc-${RINGRTC_V}/src/webrtc
SITES.webrtc=	http://distfiles.opencrew.tech/webrtc/
DISTFILES.webrtc=webrtc-${WEBRTC_V}.tgz

# libcubeb, Mozilla Foundation
CUBEB_SRC=	${WRKDIR}/cubeb-${CUBEB_ID}
CUBEB_T=	${WRKSRC}/modcargo-crates/cubeb-sys-${CUBEB_SYS_V}/libcubeb
DIST_TUPLE+=	github mozilla cubeb ${CUBEB_ID} .

ALL_PATCHFILES+=${PATCHDIR}/chromium/patch-*
PATCH_CASES+=	${PATCHDIR}/chromium/patch-*) \
		    ${PATCH} ${PATCH_DIST_ARGS} \
		    -z .orig.chromium \
		    -d ${WEBRTC_SRC}/ <$$patchfile ;;

COMPILER=	base-clang ports-gcc

MODULES=	devel/cargo \
		devel/cmake \
		devel/npm \
		devel/yarn \
		lang/clang \
		lang/python \
		www/electron

USE_GMAKE=	Yes
USE_NINJA=	No	# disable MODCMAKE targets

# pledge signal-desktop, avoid sqlcipher_mlock()
CFLAGS+=	-DOMIT_MEMLOCK

# see custom modcargo-gen-crates
MODCARGO_CARGOS_TOML=	${FTS5_TOML} \
			${LIBSIGNAL_TOML} \
			${RINGRTC_TOML} \
			${SQLCEXT_TOML}
# libsignal/linkme is broken with https://github.com/dtolnay/linkme/commit
# 64e7c63c106848481bea8f66c4885b52c26ca9ec
# It's probably related to https://github.com/dtolnay/linkme/issues/49
MODCARGO_RUSTFLAGS+=	-Clink-dead-code
# libclang.so
MODCARGO_ENV+=		LIBCLANG_PATH=${LOCALBASE}/llvm${MODCLANG_VERSION}/lib \
			LD_LIBRARY_PATH=${LOCALBASE}/llvm${MODCLANG_VERSION}/lib
MODCARGO_BUILD=		No
MODCARGO_INSTALL=	No
MODCARGO_TEST=		No

MODELECTRON_BUILDER=	Yes
MODELECTRON_SRC=	${WRKSRC}
MODELECTRON_TARGET=	signal-desktop

MODELECTRON_WRAPPER=	Yes
MODELECTRON_WRAPPER_APP=Signal
MODELECTRON_WRAPPER_ENV=NODE_ENV=production

MODNPM_BUILD=		No
MODNPM_INSTALL=		No
MODNPM_TARGETS=		${WRKSRC} \
			${WRKSRC}/sticker-creator \
			${RINGRTC_NODE}

MODYARN_TARGETS=	${LIBSIGNAL_NODE}

MODPY_RUNDEP=		No

BUILD_DEPENDS+=	devel/app-builder \
		devel/gn \
		devel/ninja \
		textproc/re2
RUN_DEPENDS+=	devel/desktop-file-utils

DEBUG_PACKAGES=	${BUILD_PACKAGES}

SUBST_VARS+=	WRKDIR WRKSRC MODCARGO_TARGET_DIR

# pre-define source date, no git show -s --format=%ct
MAKE_ENV+=	SOURCE_DATE_EPOCH=$$(date +'%s')
# signal's appbuilder config
MAKE_ENV+=	SIGNAL_ENV=production

# see electron/Makefile
GN_SYSTEM_LIBS=	crc32c \
		dav1d \
		double-conversion \
		icu \
		jsoncpp \
		libaom \
		libevent \
		libpng \
		libvpx \
		libwebp \
		libxml \
		libxslt \
		openh264 \
		re2 \
		snappy \
		woff2
GN_ARGS=	use_system_libjpeg=true \
		use_system_harfbuzz=true
# electron/Makefile link options
GN_ARGS+=	symbol_level=1 \
		is_component_build=false
GN_ARGS+=	use_thin_lto=false \
		thin_lto_enable_optimizations=true
_EXTRA_LDFLAGS=-L${LOCALBASE}/lib -L${X11BASE}/lib
.if ${MACHINE_ARCH} == "aarch64"
GN_ARGS+=	extra_ldflags=\"${_EXTRA_LDFLAGS}\"
PKG_ARGS+=	-Dswiftshader=0
.elif ${MACHINE_ARCH} == "amd64"
BUILD_DEPENDS+=	devel/nasm
GN_ARGS+=	extra_ldflags=\"${_EXTRA_LDFLAGS}\"
PKG_ARGS+=	-Dswiftshader=1
.elif ${MACHINE_ARCH} == "i386"
BUILD_DEPENDS+=	devel/nasm
GN_ARGS+=	extra_ldflags=\"${_EXTRA_LDFLAGS} -Wl,--no-keep-memory\"
PKG_ARGS+=	-Dswiftshader=1
.else
PKG_ARGS+=	-Dswiftshader=0
.endif
# electron/Makefile common options
_EXTRA_CPPFLAGS=-idirafter ${LOCALBASE}/include -idirafter ${X11BASE}/include
GN_ARGS+=	clang_use_chrome_plugins=false \
		enable_rust=false \
		extra_cppflags=\"${_EXTRA_CPPFLAGS}\" \
		fatal_linker_warnings=false \
		treat_warnings_as_errors=false \
		use_custom_libcxx=false \
		use_sysroot=false

# see ringrtc/bin/build-electron
GN_ARGS+=	rtc_build_examples=false \
		rtc_build_tools=false \
		rtc_include_tests=false \
		rtc_enable_protobuf=false \
		rtc_use_x11=false \
		rtc_enable_sctp=false \
		rtc_libvpx_build_vp9=true \
		rtc_include_ilbc=false

# webrtc
GN_ARGS+=	is_debug=false \
		is_clang=true \
		extra_cxxflags=\"${CXXFLAGS}\"

post-extract:
	# setup boring-sys
	mkdir -p ${BORINGSSL_T}
	rm -rf ${BORINGSSL_T}/*
	mv ${WRKDIR}/boringssl-${BORINGSSL_ID} ${BORINGSSL_T}/boringssl
	# setup webrtc
	mkdir -p ${WEBRTC_T}
	mv ${WRKDIR}/webrtc-${WEBRTC_V} ${WEBRTC_T}/src

pre-patch:
	# link depends into ${WRKSRC} to handle patches
	mv ${FTS5_SRC} ${WRKSRC}/Signal-FTS5-Extension
	ln -s ${WRKSRC}/Signal-FTS5-Extension ${FTS5_SRC}
	mv ${SQLCEXT_SRC} ${WRKSRC}/Signal-Sqlcipher-Extension
	ln -s ${WRKSRC}/Signal-Sqlcipher-Extension ${SQLCEXT_SRC}
	mv ${LIBSIGNAL_SRC} ${WRKSRC}/libsignal
	ln -s ${WRKSRC}/libsignal ${LIBSIGNAL_SRC}
	mv ${RINGRTC_SRC} ${WRKSRC}/ringrtc
	ln -s ${WRKSRC}/ringrtc ${RINGRTC_SRC}
	mv ${CUBEB_SRC} ${CUBEB_T}
	ln -s ${CUBEB_T} ${CUBEB_SRC}
	# apply signal-desktop patches
	# [ $${_p} == "protobufjs+7.3.2.patch" ] && continue;
	cd ${WRKSRC} && for _p in patches/*.patch; do \
		echo "===>  Applying signal-desktop $${_p}" ; \
		${PATCH} -l -f -p1 -z .orig.signal \
			-d ${WRKSRC} -i ${WRKSRC}/$${_p}; \
	done

pre-configure:
	@ln -sf ${MODPY_BIN} ${WRKDIR}/bin/python
	@ln -sf ${MODPY_BIN} ${WRKDIR}/bin/vpython3
	@ln -sf ${LOCALBASE}/bin/llvm-ar-${MODCLANG_VERSION} ${WRKDIR}/bin/ar
	# setup yarnrc for using electron node headers
	echo 'nodedir "${ELECTRON_NODE_DIR}"' >> ${WRKSRC}/.yarnrc

do-configure:
	${SUBST_CMD} ${LIBSIGNAL_TOML} ${RINGRTC_TOML}
	${MODCARGO_configure}
	${SUBST_DATA} ${FILESDIR}/cargo.toml \
		${WRKDIR}/cargo.toml
	cat ${WRKDIR}/cargo.toml >>${WRKDIR}/.cargo/config

pre-build: better-sqlite3 libsignal ringrtc sticker-creator
	# setup build dir with dns-fallback.json
	mkdir -p ${WRKSRC}/build
	cp ${FILESDIR}/dns-fallback.json ${WRKSRC}/build/dns-fallback.json
	# setup required bin
	cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${ELECTRON_REBUILD_ENV} \
		HOME=${WRKDIR} npm rebuild --verbose \
		npm-run-all protobufjs-cli sass
	# build signal
	cd ${WRKSRC} && ${NPM_CMD} run build:acknowledgments ${NPM_ARGS}
	cd ${WRKSRC} && ${NPM_CMD} run generate ${NPM_ARGS}
	cd ${WRKSRC} && ${NPM_CMD} run build:esbuild:prod ${NPM_ARGS}

post-install:
	# menu
	${INSTALL_DATA_DIR} ${PREFIX}/share/applications
	${INSTALL_DATA} ${FILESDIR}/${MODELECTRON_TARGET}.desktop \
		${PREFIX}/share/applications/${MODELECTRON_TARGET}.desktop
	${INSTALL_DATA_DIR} ${PREFIX}/share/pixmaps
	${INSTALL_DATA} ${WRKSRC}/images/signal-logo-desktop-linux.png \
		${PREFIX}/share/pixmaps/${MODELECTRON_TARGET}.png

# XXX test-better-sqlite ?
# XXX test-libwebrtc ?
# XXX skipt test-ringrtc, spawn electron but does not run
do-test:	test-libsignal \
		test-sticker-creator \
		test-signal-desktop

sqlcipher-extension:
	# build sqlcipher-extension native depends for better-sqlite3
	cd ${SQLCEXT_SRC} && ${SETENV} ${MAKE_ENV} ${CONFIGURE_ENV} \
		${MODCARGO_ENV} ${MODCARGO_CARGO_BIN} build \
		--release

better-sqlite3: sqlcipher-extension
	# build better-sqlite3 native depends
	cp ${DISTDIR}/${DISTFILES.sqlc} ${SQLCIPHER_T}/sqlcipher.tar.gz
	${SUBST_CMD} ${SQLCIPHER_T}/sqlite3.gyp
	cd ${SQLCIPHER_T}/.. && ${SETENV} ${MAKE_ENV} ${ELECTRON_REBUILD_ENV} \
		node ${NPM_GYP_BIN} rebuild

libsignal:
	# build libsignal native depends (fake node-gyp build)
	cd ${LIBSIGNAL_SRC} && ${SETENV} ${MAKE_ENV} ${CONFIGURE_ENV} \
		${MODCARGO_ENV} ${MODCARGO_CARGO_BIN} build \
		-p libsignal-node --release
	# install libsignal prebuild
	mkdir -p ${LIBSIGNAL_T}/openbsd-${NODE_ARCH}
	cp ${MODCARGO_TARGET_DIR}/release/libsignal_node.so \
		${LIBSIGNAL_T}/openbsd-${NODE_ARCH}/node.napi.node

webrtc:
	# configure libwebrtc native depends for ringrtc
	echo "# fake gclient_args" > ${WEBRTC_SRC}/build/config/gclient_args.gni
	cd ${WEBRTC_SRC} && ${SETENV} ${MAKE_ENV} \
		build/linux/unbundle/replace_gn_files.py \
		--system-libraries ${GN_SYSTEM_LIBS}
	cd ${WEBRTC_SRC} && ${SETENV} ${CONFIGURE_ENV} ${MAKE_ENV} \
		gn gen out/release --args="${GN_ARGS}"
	# build libwebrtc native depends for ringrtc
	cd ${WEBRTC_SRC} && ${SETENV} ${MAKE_ENV} \
		ninja -j ${MAKE_JOBS} -C out/release

ringrtc: webrtc
	# build ringrtc native depends
	cd ${RINGRTC_SRC} && ${SETENV} ${MAKE_ENV} ${CONFIGURE_ENV} \
		OUTPUT_DIR=${WEBRTC_SRC}/out \
		${MODCARGO_ENV} ${MODCARGO_CARGO_BIN} build -p ringrtc \
		--features electron --release \
		${MODCARGO_BUILD_ARGS}
	# install ringrtc prebuild
	mkdir -p ${RINGRTC_T}/openbsd
	cp ${MODCARGO_TARGET_DIR}/release/libringrtc.so \
		${RINGRTC_T}/openbsd/libringrtc-${NODE_ARCH}.node

sticker-creator:
	# build sticker-creator
	cd ${WRKSRC}/sticker-creator && ${NPM_CMD} rebuild ${NPM_ARGS}
	cd ${WRKSRC}/sticker-creator && ${SETENV} ${MAKE_ENV} \
		npm run build

test-libsignal: libsignal
	# copy libsignal native lib
	mkdir -p ${LIBSIGNAL_NODE}/build/Release
	cp ${MODCARGO_TARGET_DIR}/release/libsignal_node.so \
		${LIBSIGNAL_NODE}/build/Release/node.napi.node
	# link libsignal message backup tests
	rm -rf ${LIBSIGNAL_SRC}/${LIBSIGNAL_TDIR}
	ln -fs ${WRKDIR}/Signal-Message-Backup-Tests-${LIBSIGNAL_TEST} \
		${LIBSIGNAL_SRC}/${LIBSIGNAL_TDIR}
	# build libsignal test
	cd ${LIBSIGNAL_NODE} && ${SETENV} ${MAKE_ENV} yarn tsc
	# run libsignal test
	cd ${LIBSIGNAL_NODE} && ${SETENV} ${MAKE_ENV} yarn test

# XXX .sndio/cookie ?
# audio_device_sndio.cc:26: Couldn't open audio device
# XXX skipt test-ringrtc, spawn electron but does not run
test-ringrtc: ringrtc
	# XXX Xvfb :1 &
	# XXX doas cp -R ~/.sndio ${WRKDIR}/
	# copy ringrtc native lib
	mkdir -p ${RINGRTC_NODE}/build/openbsd
	cp ${MODCARGO_TARGET_DIR}/release/libringrtc.so \
		${RINGRTC_NODE}/build/openbsd/libringrtc-${NODE_ARCH}.node
	# build ringrtc test
	cd ${RINGRTC_NODE} && ${SETENV} ${MAKE_ENV} yarn tsc
	# run ringrtc test
	mkdir -p ${WRKDIR}/.config/electron
	cd ${RINGRTC_NODE} && ${SETENV} ${MAKE_ENV} DISPLAY=:1 \
		ELECTRON_PATH=${LOCALBASE}/bin/electron \
		yarn test

test-sticker-creator:
	# run sticker-creator test
	cd ${WRKSRC}/sticker-creator && ${SETENV} ${MAKE_ENV} \
		CI=ci yarn test

test-signal-desktop:
	# XXX Xvfb :1 &
	mkdir -p ${WRKDIR}/.config/electron
	# setup electron wraper
	mkdir -p ${WRKSRC}/node_modules/.bin
	rm -rf ${WRKSRC}/node_modules/.bin/electron
	ln -fs ${LOCALBASE}/bin/electron \
		${WRKSRC}/node_modules/.bin/electron
	rm -rf ${WRKSRC}/dist/linux-unpacked/signal-desktop
	${SUBST_PROGRAM} ${FILESDIR}/signal-desktop \
		${WRKSRC}/dist/linux-unpacked/signal-desktop
	# copy libsignal native lib
	cd ${WRKSRC}/node_modules/@signalapp/mock-server/node_modules && \
		mkdir -p @signalapp/libsignal-client/build/Release && \
		cp ${MODCARGO_TARGET_DIR}/release/libsignal_node.so \
			@signalapp/libsignal-client/build/Release/node.napi.node
	# run signal-desktop test
	cd ${WRKSRC} && ${SETENV} ${TEST_ENV} DISPLAY=:1 \
		ELECTRON_PATH=${LOCALBASE}/bin/electron \
		yarn test
# XXX fake launch test from system or make one more wraper ?
	cd ${WRKSRC} && ${SETENV} ${TEST_ENV} DISPLAY=:1 \
		ELECTRON_PATH=${LOCALBASE}/bin/electron \
		yarn test-release
	cd ${WRKSRC} && ${SETENV} ${TEST_ENV} DISPLAY=:1 \
		ELECTRON_PATH=${LOCALBASE}/bin/electron \
		yarn test-mock
# XXX ts/util/asyncIterables.js
# SyntaxError: Unexpected token '['
	cd ${WRKSRC} && ${SETENV} ${TEST_ENV} DISPLAY=:1 \
		ELECTRON_PATH=${LOCALBASE}/bin/electron \
		ELECTRON_OVERRIDE_DIST_PATH=${WRKSRC}/node_modules/.bin \
		yarn test-node-coverage

### targets for port maintainer(s)

user-dev:
	cp ${WRKSRC}/config/{production,local-development}.json
	cd ${WRKSRC} && \
		NODE_ENV=development electron .

# run under _pbuild
_webrtc-compile_commands:
	cd ${WEBRTC_SRC} && ${SETENV} ${MAKE_ENV} \
		ninja -j ${MAKE_JOBS} -C out/release \
		-t compdb > compile_commands.json
webrtc-compile_commands:
	${_PBUILD} make _webrtc-compile_commands

# make versions : download, extract then print versions for depends
# XXX note : maintener still have to manually update BORINGSSL_ID
# make modyarn-gen-modules : regen modules.inc, see devel/yarn
# make modnpm-gen-modules : regen modules.inc, see devel/npm
# make modcargo-gen-crates : handle multiple Cargo.toml, regen crates.inc
# make tarball : gen webrtc-${WEBRTC_V}.tgz with gclient
# make chromium-patches : check OpenBSD specific patches for chromium src
# make dns-fallback : no net during build, pre-made files/dns-fallback.json

_TMP = /tmp/signal-desktop-${V}
_SIGNALAPP_GH =	https://raw.githubusercontent.com/signalapp
_BORING_GH =	${_SIGNALAPP_GH}/boring/
_BSQL_GH =	${_SIGNALAPP_GH}/better-sqlite3/
_LIBSIGNAL_GH =	${_SIGNALAPP_GH}/libsignal/
_RINGRTC_GH =	${_SIGNALAPP_GH}/ringrtc/
_SIGNAL_GH =	${_SIGNALAPP_GH}/Signal-Desktop/
_SSQLE_GH=	${_SIGNALAPP_GH}/Signal-Sqlcipher-Extension
versions:
	# make versions
	@mkdir -p ${_TMP} ; \
	ftp -VMo ${_TMP}/package.json \
		${_SIGNAL_GH}/v${V}/package.json ; \
	_ringrtc_v=$$(grep "@signalapp/ringrtc" \
		${_TMP}/package.json | awk -F ":" '{print $$2}' | \
		sed -E 's#("|,| )##g') ; \
	_libsignal_v=$$(grep "@signalapp/libsignal-client" \
		${_TMP}/package.json | awk -F ":" '{print $$2}' | \
		sed -E 's#("|,| )##g') ; \
	_bsql_v=$$(grep '@signalapp/better-sqlite3' \
		${_TMP}/package.json | awk -F ":" '{print $$2}' | \
		sed -E 's#("|,| )##g') ; \
	printf "# ELECTRON_V=%s\n" $$(awk /'"electron":'/'{print $$2}' \
		${_TMP}/package.json | sed -E 's/("|,)//g') ; \
	printf "# NODE_V=%s\n" $$(awk /'"node":'/'{print $$2}' \
		${_TMP}/package.json | sed 's/"//g') ; \
	printf "# better-sqlite3 deps\n" ; \
	printf "# BETTER_SQLITE3_V=%s\n" $$_bsql_v ; \
	ftp -VMo ${_TMP}/download.js \
		${_BSQL_GH}/v$${_bsql_v}/deps/download.js ; \
	printf "SQLCIPHER_H=\t%s\n" $$(grep "const HASH" \
		${_TMP}/download.js | awk -F '=' '{print $$2}' | \
		sed -e "s/ '//" -e "s/';//") ; \
	printf "SQLCIPHER_URI=\t%s/\n" $$(grep "const BASE_URI" \
		${_TMP}/download.js | awk -F '=' '{print $$2}' | \
		sed -e "s/ \`//" -e "s/\`;//") ; \
	_sqlcipher_v=$$(grep "const SQLCIPHER_VERSION" \
		${_TMP}/download.js | awk -F '=' '{print $$2}' | \
		sed -e "s/ '//" -e "s/';//") ; \
	_extension_v=$$(grep "const EXTENSION_VERSION" \
		${_TMP}/download.js | awk -F '=' '{print $$2}' | \
		sed -e "s/ '//" -e "s/';//") ; \
	printf "SQLCIPHER_V=\tv2-%s--%s-\$${SQLCIPHER_H}\n" \
		$$_sqlcipher_v $$_extension_v ; \
	printf "SQLCEXT_V=\t%s\n" $$_extension_v ; \
	ftp -VMo ${_TMP}/sqlcipher.Cargo.lock \
		${_SSQLE_GH}/v$${_extension_v}/Cargo.lock ; \
	printf "FTS5_ID=\t%s\n" $$(grep "signalapp/Signal-FTS5-Extension" \
		${_TMP}/sqlcipher.Cargo.lock | \
		uniq | awk -F '#|"' '{print $$3}') ; \
	printf "# libsignal depends\n" ; \
	printf "LIBSIGNAL_V=\t%s\n" $$_libsignal_v ; \
	ftp -VMo ${_TMP}/libsignal.Cargo.lock \
		${_LIBSIGNAL_GH}/v$${_libsignal_v}/Cargo.lock ; \
	_boring_v=$$(grep "signalapp/boring" \
		${_TMP}/libsignal.Cargo.lock | \
		uniq | awk -F '#|"' '{print $$3}') ; \
	printf "BORING_ID=\t%s\n" $$_boring_v ; \
	printf "# ringrtc depends\n" ; \
	printf "RINGRTC_V=\t%s\n" $$_ringrtc_v ; \
	ftp -VMo ${_TMP}/version.properties \
		${_RINGRTC_GH}/v$${_ringrtc_v}/config/version.properties ; \
	printf "WEBRTC_V=\t%s\n" $$(grep "webrtc.version" \
		${_TMP}/version.properties | awk -F "=" '{print $$2}' ) ; \

# handle multiple cargo files and add github depends for libsignal
# XXX make modcargo-gen-crates-licenses doesn't preserve git+ depends
modcargo-gen-crates:
	@make extract >/dev/null 2>&1
	@echo '# run: make modcargo-gen-crates-licenses'
	@cat ${MODCARGO_CARGOS_TOML:toml=lock} | awk '\
		/^name = / { n=$$3; gsub("\"", "", n); } \
		/^version = / { v=$$3; gsub("\"", "", v); } \
		/^source = "registry\+.*github.com.*crates\.io-index"/ \
			{ print "MODCARGO_CRATES +=	" n "	" v; }' | \
		sort | uniq
	# libsignal/Cargo.lock git+ depends
.for _target in boring curve25519-dalek
	@printf "DIST_TUPLE+=\tgithub signalapp ${_target} %s %s\n" $$( \
		grep "signalapp/${_target}" ${LIBSIGNAL_SRC}/Cargo.lock | \
		uniq | awk -F '#|"' '{print $$3}' ) ${_target}
.endfor

# XXX need ~10G, usualy run with a custom _SRC
# XXX need custom tar -R (reproducible) diff, use gtar alternative ?
_EXCLUDE_third_party=(re2|pipewire|openh264|lss|libvpx|libunwind|libevent|libc++abi|libc++|libaom|libFuzzer|jsoncpp|harfbuzz-ng|gtest-parallel|grpc|googletest|google_benchmark|fuzztest|freetype|fontconfig|flatbuffers|ffmpeg|depot_tools|dav1d|crc32c|colorama|clang-format|ced|breakpad)
_SRC?=		${WRKDIR}/webrtc
_VER?=		${WEBRTC_V}
_PKG?=		webrtc
_FETCH?=	https://github.com/signalapp/webrtc.git \
		+refs/tags/${WEBRTC_V}
tarball:
	ulimit -d `ulimit -dH`
	mkdir -p ${_SRC}/src
	cp ${FILESDIR}/gclient ${_SRC}/.gclient
	cd ${_SRC}/src && [ -d ".git" ] || ( \
	HOME=${_SRC} git init && \
	HOME=${_SRC} git fetch ${_FETCH} --depth 1 && \
	HOME=${_SRC} git checkout FETCH_HEAD && \
	HOME=${_SRC} gclient sync --no-history --shallow \
	    --force --delete_unversioned_trees --reset \
	    --no-bootstrap --nohooks --noprehooks \
	    --with_branch_heads --with_tags \
	)
	cd ${_SRC} && \
	find ./src -type f -a ! \( \
	    -path '*/.git/*' \
	    -o -path '*/out/*' \
	    -o -path '*/buildtools/(linux64|reclient)/*' \
	    -o -path '*/third_party/blink/tools/*' \
	    -o -path '*/third_party/blink/web_tests/*' \
	    -o -path '*/third_party/breakpad/breakpad/src/processor/testdata/*'\
	    -o -path '*/third_party/catapult/tracing/test_data/*' \
	    -o -path '*/third_party/hunspell/tests/*' \
	    -o -path '*/third_party/${_EXCLUDE_third_party}/*' \
	    -o -path '*/tools/(luci-go|resultdb)/*' \
	    \) | sort > files && \
	tar -cRzf ${_PKG}-${_VER}.tgz -I files \
	    -s '|src/|${_PKG}-${_VER}/|' && \
	sha256 -b ${_PKG}-${_VER}.tgz

chromium-patches:
	make extract
	# remember to update cvs co -D "..." if you change targeted version
	@if [ -d ${_TMP}/chromium ]; then \
		echo "${_TMP}/chromium exists, skip cvs co" ; \
	else \
		cd ${_TMP} && \
		cvs co -d chromium ports/www/chromium ; \
	fi
	# test chromium patches
	rm -rf ${_TMP}/patches
	mkdir -p ${_TMP}/patches/chromium{,.rej,.miss,.new}
	mkdir -p ${_TMP}/patches/webrtc
	mkdir -p ${_TMP}/patches/media.ignore
	@for p in ${_TMP}/chromium/patches/patch-*; do \
		if [[ $$p == *"patch-media"* ]]; then \
			cp $${p} ${_TMP}/patches/media.ignore/$${p##*/} ; \
			continue ; \
		fi ; \
		if [[ $$p == *"third_party_webrtc"* ]]; then \
			cp $${p} ${_TMP}/patches/webrtc/$${p##*/} ; \
			p=${_TMP}/patches/webrtc/$${p##*/} ; \
			sed -i -e 's|third_party/webrtc/||g' $$p ; \
		fi ; \
		f=$$(grep 'Index' $$p | sed -e 's/.*: //' ) ; \
		if grep -q "@@ -0,0" $$p; then \
			cp $${p} ${_TMP}/patches/chromium/ ; \
			cp $${p} ${_TMP}/patches/chromium.new/ ; \
		elif [ -f "${WEBRTC_SRC}/$$f" ]; then \
			${PATCH} ${PATCH_DIST_ARGS} -sfC -z .orig.chromium \
				-d ${WEBRTC_SRC} < $${p} && \
				cp $${p} ${_TMP}/patches/chromium/ || \
				cp $${p} ${_TMP}/patches/chromium.rej/ ; \
		else \
			cp $${p} ${_TMP}/patches/chromium.miss/ ; \
		fi ; \
	done
	@echo "rejected:"
	@ls ${_TMP}/patches/chromium.rej
	# if ok, copy ${_TMP}/patches/chromium into port

dns-fallback:
	@make configure >/dev/null 2>&1
	@cd ${WRKSRC} && \
		${_PBUILD} ${NPM_CMD} run build:dns-fallback && \
		cat ${WRKSRC}/build/dns-fallback.json

.include "modules.inc"
.include "crates.inc"

.include <bsd.port.mk>
