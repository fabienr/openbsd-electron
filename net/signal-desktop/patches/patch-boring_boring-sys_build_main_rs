Index: boring/boring-sys/build/main.rs
--- boring/boring-sys/build/main.rs.orig
+++ boring/boring-sys/build/main.rs
@@ -471,15 +471,15 @@ fn get_extra_clang_args_for_bindgen(config: &Config) -
 
 fn ensure_patches_applied(config: &Config) -> io::Result<()> {
     let mut lock_file = LockFile::open(&config.out_dir.join(".patch_lock"))?;
-    let src_path = get_boringssl_source_path(config);
-    let has_git = src_path.join(".git").exists();
+//    let src_path = get_boringssl_source_path(config);
+//    let has_git = src_path.join(".git").exists();
 
     lock_file.lock()?;
 
     // NOTE: init git in the copied files, so we can apply patches
-    if !has_git {
-        run_command(Command::new("git").arg("init").current_dir(src_path))?;
-    }
+//    if !has_git {
+//        run_command(Command::new("git").arg("init").current_dir(src_path))?;
+//    }
 
     if config.features.pq_experimental {
         println!("cargo:warning=applying experimental post quantum crypto patch to boringssl");
@@ -507,15 +507,15 @@ fn apply_patch(config: &Config, patch_name: &str) -> i
         .join(patch_name)
         .canonicalize()?;
 
-    let mut args = vec!["apply", "-v", "--whitespace=fix"];
+    let mut args = vec!["-p 1",];
 
     // non-bazel versions of BoringSSL have no src/ dir
-    if config.is_bazel {
-        args.push("-p2");
-    }
+//    if config.is_bazel {
+//        args.push("-p2");
+//    }
 
     run_command(
-        Command::new("git")
+        Command::new("patch")
             .args(&args)
             .arg(cmd_path)
             .current_dir(src_path),
