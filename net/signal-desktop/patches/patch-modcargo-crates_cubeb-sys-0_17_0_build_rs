Index: modcargo-crates/cubeb-sys-0.17.0/build.rs
--- modcargo-crates/cubeb-sys-0.17.0/build.rs.orig
+++ modcargo-crates/cubeb-sys-0.17.0/build.rs
@@ -70,7 +70,7 @@ fn main() {
             ])
             .status();
     }
-    let libcubeb_rust_exists = Path::new(&(libcubeb_path.clone() + "/src/cubeb-coreaudio-rs"))
+    let mut libcubeb_rust_exists = Path::new(&(libcubeb_path.clone() + "/src/cubeb-coreaudio-rs"))
         .exists()
         && Path::new(&(libcubeb_path.clone() + "/src/cubeb-pulse-rs")).exists();
 
@@ -78,9 +78,14 @@ fn main() {
     let windows = target.contains("windows");
     let darwin = target.contains("darwin");
     let freebsd = target.contains("freebsd");
+    let openbsd = target.contains("openbsd");
     let android = target.contains("android");
     let mut cfg = cmake::Config::new(&libcubeb_path);
 
+    if openbsd {
+        libcubeb_rust_exists = false;
+    }
+
     if darwin {
         let cmake_osx_arch = if target.contains("aarch64") {
             // Apple Silicon
@@ -103,6 +108,7 @@ fn main() {
         .define("BUILD_TESTS", "OFF")
         .define("BUILD_TOOLS", "OFF")
         .define("BUILD_RUST_LIBS", build_rust_libs)
+        .define("USE_SANITIZERS", "OFF")
         // Force rust libs to include target triple when outputting,
         // for easier linking when cross-compiling.
         .env("CARGO_BUILD_TARGET", &target)
@@ -147,7 +153,7 @@ fn main() {
 
         println!("cargo:rustc-link-search=native={}/lib", dst.display());
     } else {
-        if freebsd || android {
+        if freebsd || android || openbsd {
             println!("cargo:rustc-link-lib=dylib=c++");
         } else {
             println!("cargo:rustc-link-lib=dylib=stdc++");
