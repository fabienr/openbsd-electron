#!/usr/bin/perl -w

# $OpenBSD$

# Copyright (c) 2024 Fabien Romano <fabien@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all cp.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use 5.012;
use strict;
use warnings;
use JSON::PP;
use File::Basename;

use OpenBSD::Getopt;

my $omitdev = 0;
my $omitoptional = 0;
my %includes;
my %excludes;
getopts('doi:x:', {
	'd' => sub {$omitdev = 1;},
	'o' => sub {$omitoptional = 1;},
	'i' => sub {
		my $pkg = shift;
		$pkg =~ s/^\s+//;
		$includes{$pkg} = 1;
	},
	'x' => sub {
		my $pkg = shift;
		$pkg =~ s/^\s+//;
		$excludes{$pkg} = 1;
	}
});

die if @ARGV < 2;

my $wrkdir = shift;
my $target = shift;

my $bins = ();
my @dists_npm = ();
my @dists_github = ();
my %modules;

# from Port.pm
sub get_json_file
{
	my ( $file, ) = @_;

	open my $h, '<', $file or die $!;
	my $data = do { local $/ = undef; <$h> };
	return decode_json $data;
}

sub _dir_bin
{
	my ( $workdir, $bin ) = @_;
	my $dir = "$workdir/$bin";
	opendir(D, "$dir") || die "Can't open directory $dir: $!\n";
	my @names = readdir(D);
	closedir(D);

	$workdir =~ s/$target//;
	foreach my $file (@names) {
		next if ($file eq ".");
		next if ($file eq "..");
		push @{$bins}, "$workdir/$bin/$file;$file";
	}
}

sub _module_bin
{
	my ( $workdir, $node ) = @_;
	if (exists $node->{bin} && ref($node->{bin}) eq "HASH") {
		$workdir =~ s/$target//;
		foreach my $bin (keys %{$node->{bin}}) {
			push @{$bins}, "$workdir/$node->{bin}{$bin};$bin";
		}
	} elsif (exists $node->{bin}) {
		$workdir =~ s/$target//;
		push @{$bins}, "$workdir/$node->{bin};$node->{name}";
	} elsif (exists $node->{directories}{bin}) {
		_dir_bin($workdir, $node->{directories}{bin});
	}
}

sub _modules_add
{
	my ( $path, $node ) = @_;
	my $version = $node->{version};
	if (index($version, "npm:") == 0) {
		$version =~ s/.*@^?//;
	}
	my $id;
	if (exists($node->{resolved})) {
		$id = $node->{resolved};
		if (index($id, "https://registry.npmjs.org") == 0) {
			$id =~ s|https://registry.npmjs.org/||;
			$id =~ s|/\-/.*||;
		} elsif (index($id, "git+ssh://git\@github.com/") == 0) {
			# git+ssh://git@github.com/account/project.git#version
			$id =~ s|.*\@github.com/||;
			($version = $id) =~ s|.*#||;
			$id =~ s|.git#.*||;
			$id = "github:".$id;
		} else {
			say STDERR "invalid resolved : " . $id;
			return;
		}
	} elsif (exists($node->{name})) {
		$id = $node->{name};
	} else {
		$id = $path;
		$id =~ s|(.*/)?node_modules/||;
	}
	my $exclude = 0;
	for my $p (keys(%excludes)) {
		if (index($path, $p) != -1) {
			$exclude = 1;
			last;
		}
	}
	if ($exclude) {
		say STDERR "exclude : " . $path;
		return;
	} elsif (exists $includes{$id}) {
		say STDERR "include : " . $path;
	} elsif (exists $node->{optional} && $omitoptional) {
		say STDERR "skip optional : " . $path;
		return;
	} elsif (exists $node->{dev} && $omitdev) {
		say STDERR "skip dev : " . $path;
		return;
	} elsif (exists($node->{os}) and not grep (/openbsd/, @{$node->{os}})
	    and not grep (/!win32/, @{$node->{os}})) {
		say STDERR "ignore (os) : " . $path . " : " .
		    join(", ", @{$node->{os}});
		return;
	}
	if ( not exists $modules{$id}{$version} ) {
		$modules{$id}{$version} = ();
	}
	push @{$modules{$id}{$version}}, $path;
}

sub _dependencies
{
	my ($path, $nodes) = @_;
	if (not exists $nodes->{dependencies}) {return;}
	foreach my $node (sort keys %{$nodes->{dependencies}}) {
		_modules_add($path.$node, $nodes->{dependencies}{$node});
		_dependencies($path.$node."/node_modules/",
		    $nodes->{dependencies}{$node});
	}
}

while (my $file = shift) {
	my $nodes;
	my $dirname  = dirname($file);
	$nodes = get_json_file("$target/package.json");
	_module_bin($target, $nodes);
	$nodes = get_json_file($file);
	$dirname =~ s/$wrkdir//;
	# flat package-lock.json format
	foreach my $node (sort keys %{$nodes->{packages}}) {
		if ($node eq "") {next;}
		_modules_add($dirname."/".$node, $nodes->{packages}{$node})
	}
	# tree package-lock.json format
	_dependencies($dirname."/node_modules/", $nodes);
}

my $tree = ();
foreach my $id (keys %modules) {
	my $dists;
	my $account;
	my $project;
	my $version;
	my $location;
	my $dist = "\${MODNPM_DIST}/";
	my $sufx = ".tgz";
	if (index($id, "github:") == 0) {
		$dists = \@dists_github;
		($project = $id) =~ s/github\://;
		($account, $project) = split '/', $project;
		$location = $account."-".$project;
		$dist .= $location."-{".$account."/".$project."/archive/}";
		$sufx = "\${EXTRACT_SUFX.github}";
	} else {
		$dists = \@dists_npm;
		($location = $id) =~ s/\//-/;
		$project = $id;
		if ($id =~ /\//) {
			($account, $project) = split '/', $id;
			$dist .= $account."-";
		}
		$dist .= "{".$id."/-/}".$project."-";
	}
	foreach my $version (keys %{$modules{$id}}) {
		push @{$dists}, $dist.$version.$sufx;
		foreach my $path (@{$modules{$id}{$version}}) {
			# tree: dst;src, sort to create shorter path first
			push @{$tree}, $path.";".$location."-".$version.$sufx;
		}
	}
}

sub uniq {
	my %seen;
	grep !$seen{$_}++, @_;
}
if (scalar @dists_npm) {
	say "DISTFILES.npm += \\";
	foreach my $dist (uniq sort @dists_npm) {
		say $dist." \\";
	}
	say "";
}
if (scalar @dists_github) {
	say "DISTFILES.github += \\";
	foreach my $dist (uniq sort @dists_github) {
		say $dist." \\";
	}
	say "";
}

say "MODNPM_TREE += \\";
foreach my $module (reverse sort @{$tree}) {
	say $module." \\";
}
say "";

if ($bins) {
	say "MODNPM_BIN += \\";
	foreach my $l (sort @{$bins}) {
		say $l." \\";
	}
	say "";
}
