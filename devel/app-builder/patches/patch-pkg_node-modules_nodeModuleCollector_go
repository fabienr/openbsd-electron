https://github.com/develar/app-builder/issues/105

Index: pkg/node-modules/nodeModuleCollector.go
--- pkg/node-modules/nodeModuleCollector.go.orig
+++ pkg/node-modules/nodeModuleCollector.go
@@ -57,6 +57,14 @@ func (t *Collector) readDependencyTree(dependency *Dep
 		return nil
 	}
 
+	if log.IsDebugEnabled() {
+		log.Debug("readDependencyTree",
+			zap.String("name", dependency.Name),
+			zap.String("v", dependency.Version),
+			zap.String("dir", dependency.dir),
+			zap.String("node_modules", nodeModuleDir))
+	}
+
 	// process direct children first
 	queue := make([]*Dependency, maxQueueSize)
 	queueIndex := 0
@@ -214,6 +222,29 @@ func (t *Collector) resolveDependency(parentNodeModule
 	if realParentNodeModuleDir == "" {
 		return nil, nil
 	}
+
+	// XXX consumers expect the node_modules shape or the dependency tree ?
+	// hoist the deps to the actual parent
+	if realParentNodeModuleDir != parentNodeModuleDir {
+		dependencyNameToDependency = t.NodeModuleDirToDependencyMap[realParentNodeModuleDir]
+		if dependencyNameToDependency != nil {
+			dependency := (*dependencyNameToDependency)[name]
+			if dependency != nil {
+				return nil, nil
+			}
+		}
+		if log.IsDebugEnabled() {
+			log.Debug("resolveDependency",
+				zap.String("parent", parentNodeModuleDir),
+				zap.String("real", realParentNodeModuleDir),
+				zap.String("name", name))
+		}
+	} else if log.IsDebugEnabled() {
+		log.Debug("resolveDependency",
+			zap.String("parent", parentNodeModuleDir),
+			zap.String("name", name))
+	}
+
 	dependencyDir := filepath.Join(realParentNodeModuleDir, name)
 	dependency, err := readPackageJson(dependencyDir)
 	if err != nil {
